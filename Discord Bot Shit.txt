
const player = new Player(client);

player.on("error", (queue, error) => {
    console.log(`[${queue.guild.name}] Error emitted from the queue: ${error.message}`);
});

player.on("connectionError", (queue, error) => {
    console.log(`[${queue.guild.name}] Error emitted from the connection: ${error.message}`);
});

player.on("trackStart", (queue, track) => {
    queue.metadata.send(`🎶 | Started playing: **${track.title}** in **${queue.connection.channel.name}**!`);
});

player.on("trackAdd", (queue, track) => {
    queue.metadata.send(`🎶 | Track **${track.title}** queued!`);
});

player.on("botDisconnect", (queue) => {
    queue.metadata.send("❌ | I was manually disconnected from the voice channel, clearing queue!");
});

player.on("channelEmpty", (queue) => {
    queue.metadata.send("❌ | Nobody is in the voice channel, leaving...");
});

player.on("queueEnd", (queue) => {
    queue.metadata.send("✅ | Queue finished!");
});

client.on("messageCreate", async (message) => {
    if (message.author.bot || !message.guild) return;
if (!client.application?.owner) await client.application?.fetch();
});

client.on("messageCreate", async (message) => {
    if (message.content === "!deploy" && message.author.id === client.application?.owner?.id) {
    await message.guild.commands.set([
        {
            name: "play",
            description: "Plays a song from youtube",
            options: [
                {
                    name: "query",
                    type: "STRING",
                    description: "The song you want to play",
                    required: true
                }
            ]
        },
        {
            name: "skip",
            description: "Skip to the current song"
        },
        {
            name: "queue",
            description: "See the queue"
        },
        {
            name: "stop",
            description: "Stop the player"
        },
    ]);

    await message.reply("Deployed!");
}
});